#consecutive-numbers
SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE l1.id = l2.id - 1 AND l2.id = l3.id - 1 AND l2.num = l1.num AND l3.num = l1.num;

#Delete Duplicate Emails
DELETE p1 
FROM Person p1, Person p2 
WHERE p1.email=p2.email and p1.id>p2.id;

#Duplicate Emails
SELECT email AS Email
FROM Person
GROUP BY email
HAVING count(email) > 1;

#Not Boring Movies
SELECT * FROM Cinema
WHERE description != "boring" AND MOD(id, 2) = 1
ORDER BY rating DESC;

#Employee Bonus
SELECT Employee.name, Bonus.bonus
FROM Bonus
RIGHT JOIN Employee
ON Bonus.empID = Employee.empId 
WHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL;

#Rising Temperature
SELECT w2.id AS Id
FROM Weather w1
INNER JOIN Weather w2 ON 
    w2.temperature > w1.temperature 
    AND w2.recordDate > w1.recordDate 
    AND DATEDIFF(w2.recordDate, w1.recordDate) = 1;

#Combine Two Tables
SELECT firstName, lastName, city, state
FROM Person
LEFT JOIN Address
ON Person.personId = Address.personId;

#Customers Who Never Order
SELECT name AS Customers
FROM Customers
LEFT JOIN Orders ON Orders.CustomerID = Customers.id
WHERE customerID IS NULL;

#Percentage of Users Attended a Contest
SELECT r.contest_id,
    ROUND((COUNT(r.contest_id) / (
        SELECT COUNT(*)
        FROM Users)
        ) * 100, 2) AS percentage
FROM Users u, Register r
WHERE u.user_id = r.user_id
GROUP BY r.contest_id
ORDER BY percentage DESC, contest_id ASC;

#Project Employees I
SELECT project_id,
    ROUND(AVG(experience_years), 2) AS average_years
FROM Project p, Employee e
WHERE p.employee_id = e.employee_id
GROUP BY project_id

#Investments in 2016
SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM Insurance
WHERE (lat, lon) NOT IN (
    SELECT lat, lon
    FROM Insurance
    GROUP BY lat, lon
    HAVING COUNT(*) > 1
    ) AND tiv_2015 IN (
        SELECT tiv_2015
        FROM Insurance
        GROUP BY tiv_2015
        HAVING COUNT(*) > 1
    );

#Average Selling Price
SELECT Prices.product_id, 
    IF (Prices.product_id IN (
            SELECT product_id
            FROM UnitsSold
        ),
        ROUND(SUM(price*units)/SUM(units), 2), 0) AS average_price
FROM Prices, UnitsSold
WHERE UnitsSold.purchase_date >= Prices.start_date 
    AND UnitsSold.purchase_date <= Prices.end_date 
    AND Prices.product_id = UnitsSold.product_id
    OR Prices.product_id NOT IN (
            SELECT product_id
            FROM UnitsSold
        )
GROUP BY Prices.product_id;

#Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  DECLARE new_offset INT DEFAULT N - 1;
  RETURN (
        SELECT DISTINCT salary
        FROM Employee
        ORDER BY salary DESC
        LIMIT 1
        OFFSET new_offset
  );
END